// Code generated by Kitex v0.4.4. DO NOT EDIT.

package commentservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	comment "github.com/edufriendchen/light-tiktok/kitex_gen/comment"
)

func serviceInfo() *kitex.ServiceInfo {
	return commentServiceServiceInfo
}

var commentServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CommentService"
	handlerType := (*comment.CommentService)(nil)
	methods := map[string]kitex.MethodInfo{
		"ActionComment":   kitex.NewMethodInfo(actionCommentHandler, newCommentServiceActionCommentArgs, newCommentServiceActionCommentResult, false),
		"MGetCommentList": kitex.NewMethodInfo(mGetCommentListHandler, newCommentServiceMGetCommentListArgs, newCommentServiceMGetCommentListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "comment",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func actionCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentServiceActionCommentArgs)
	realResult := result.(*comment.CommentServiceActionCommentResult)
	success, err := handler.(comment.CommentService).ActionComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentServiceActionCommentArgs() interface{} {
	return comment.NewCommentServiceActionCommentArgs()
}

func newCommentServiceActionCommentResult() interface{} {
	return comment.NewCommentServiceActionCommentResult()
}

func mGetCommentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentServiceMGetCommentListArgs)
	realResult := result.(*comment.CommentServiceMGetCommentListResult)
	success, err := handler.(comment.CommentService).MGetCommentList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentServiceMGetCommentListArgs() interface{} {
	return comment.NewCommentServiceMGetCommentListArgs()
}

func newCommentServiceMGetCommentListResult() interface{} {
	return comment.NewCommentServiceMGetCommentListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ActionComment(ctx context.Context, req *comment.ActionRequest) (r *comment.ActionResponse, err error) {
	var _args comment.CommentServiceActionCommentArgs
	_args.Req = req
	var _result comment.CommentServiceActionCommentResult
	if err = p.c.Call(ctx, "ActionComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetCommentList(ctx context.Context, req *comment.CommentRequest) (r *comment.CommentResponse, err error) {
	var _args comment.CommentServiceMGetCommentListArgs
	_args.Req = req
	var _result comment.CommentServiceMGetCommentListResult
	if err = p.c.Call(ctx, "MGetCommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
